I. INTRODUCTION

D IGITAL media, particularly videos, play an essential role in the documentation of information, in today's world. With the help of computer vision and artificial intelligence, important data stored in videos can be extracted and used in multiple domains with the help of Computer Vision and AI. The videos of the hands of human beings reveal essential information in the form of micro -motions such as the throbbing of the veins due to the pulse or tremor components. The remote monitoring of vitals such as pulse and respiration rates of a person and remote detection of neuro-degenerative diseases such as Parkinson's disease are essential in times such as the present COVID -19 pandemic.In this spirit, this paper proposes a computerized method to detect and classify these micro motions present in the hand from mobile phone videos using video magnification, heat-mapping, skeletonization, and deep-learning. This method aims to provide an atlas or a guide for the different kinds of motions occurring in the human hand and thus help in the computerized detection of specific motions. It can be Ranjani Ramesh is a 12th grade student and National Public School, Indiranagar, Bangalore, Karnataka 560008, India. Corresponding Author email: ranjani2122appls@gmail.com Manuscript submitted October 13, 2021.used as an initial step towards remote detection of movement disorders.Previously proposed methods, such as Williams et al.'s proposition, which details a method to aid in clinical detection of Parkinson's Disease (PD) using a computerized magnification of tremors in atremulous PD patients [1] , and Hillegondsberg et al.'s approach [6] , which aims to enhance the fasciculations in Amyotrophic Lateral Sclerosis (ALS) patients using Eulerian Video Magnification [2] - [4] have shown promising results in improving the accuracy of detection of diseases by specialists. However, a basic framework that can be used for easy detection of small motions in the hand is lacking.This paper details an automated computerized method wherein videos of hands taken using standard smartphones are simultaneously subjected to skeletonization and Eulerian Video Magnification. The magnified result is heat-mapped, and the obtained output is overlapped with the skeletonized output from the first step. This step results in an output consisting of key points from the skeletonization and movement coloring from the heatmap. The intensity of the color of the heatmap and the key points are used to locate micro -motions in the hand. Waveforms of the motion of these pixels of interest are created. These waveforms are then divided into training and testing data (7:3) and passed into a classifier, which results in the automatic classification of the motion of the pixel.

A. Eulerian Video Magnification for Parkinson's Disease tremor detection

The paper 'Seeing the unseen: Could Eulerian video magnification aid clinician detection of sub-clinical Parkinson's tremor?', by Williams et al. [1] is the cornerstone and main inspiration for my research. This paper describes an experiment to detect Parkinson's Disease (PD) tremors in atremulous hands of patients using Eulerian Video Magnification. In this paper, the authors first described their data acquisition process. This process of collecting data is crucial since such curated databases of videos of hands, especially PD patients' hands, are rarely available. The data acquired is then subjected to Eulerian Video Magnification. The magnification process aims to magnify all sub-clinical tremors in the hand. The tremors in the hand consist of a mechanical component and a central component. The mechanical component of the hand consists of the natural frequency and a mechanical -reflex component which is caused due to increased mono-synaptic reflex. The central component consists of atypical oscillatory activity which occurs along the motor system of the human body. Tremors in regular subjects consist of both the mechanical and the central components, while the tremors in PD patients consist primarily of the central component. This experiment noted that the Eulerian Magnification magnified both the central and mechanical tremor components. This process proved to be useful as it provided greater magnified tremor in the hands of PD patients due to extra central tremor components in their hands. Thus, clinicians classified a significant proportion of PD patients correctly from the Eulerian video-magnified result (p < 0.003).B. Usage of "Lazy Learning" Algorithms for Classification of Oscillometric Waveforms Fig. 1 : Flowchart Representation of Pipeline of Method detailed in "A novel blood pressure estimation method based on classification of oscillometric waveforms using machinelearning methods". [5] Alghamdi et al. [5] detail a method that predicts blood pressure using Oscillometric waveforms. The technique uses the BP Data-UNSW data set, which consists of 350 Non-Invasive Blood Pressure measurement records. The data was split into 300 records for training and 50 for testing. After appropriate pre-processing of the waveform images, features are extracted and are re-labeled as:• 1 -beats before systolic • 2 -beats with systolic and diastolic points (including diastolic) • 3 -beats after diastolic point as seen in Figure 1 . The models used to predict the blood pressure were the k-Nearest Neighbors, Weighted k-Nearest Neighbors, and Bagged Trees. These models are referred to as "lazy learning" algorithms. An important inference derived from this paper is that lazy learning algorithms are as well-equipped as deep learning algorithms in such waveform analysis and classification tasks. Even though deep learning algorithms such as Deep Belief Network, Deep Neural Network and Long-Short Term Memory, and Recurrent Neural Networks (LSTM-RNN) have been preferred over models such as the kNN, Decision tree models, etc., this method has shown that models like the kNN model are well-equipped to tackle waveform classification tasks. This artcle also shows that the accuracy of kNN and wkNN are similar, and the accuracy of the Bagged Trees model is lower than these two models. This paper helped to determine an appropriate model for the task of classification of waveforms of different motions in the hand as detailed in Section III-C.

C. Lagrangian Motion Magnification

Liu et al. [7] detail a method of magnification of small motions. This paper proposes a method wherein the motions that must be amplified are selected by creating similar position and motion pixel clusters. In contrast to Eulerian Video Magnification, detailed in Section III-A, this method follows the Lagrangian perspective wherein the trajectories of single particles are determined for accurate motion estimation, which is an essential step in magnifying the user-specified clusters. Subsequently, after the amplification of motion, 'holes' are formed.These holes are filled using texture synthesis methods. The main highlights of this method are:• Its robust video registration helps to magnify only the tiny motions in the video and not the motions caused by the moving of the recording device • Its determination of feature trajectories by feature point detection • Its robust clustering of feature points trajectories However, compared to Eulerian Video Magnification (Section III-A), this method is computationally expensive due to its Lagrangian perspective. Additionally, it is more difficult to make complicated motions free of artifacts in this method [3] . Due to these shortcomings of this method, Eulerian magnification was chosen instead.

A. Eulerian Video Magnification

Eulerian Video Magnification [2] , [4] , [9] was chosen to magnify the tiny motions present in the hands of humans. Humans lack the ability to process small spatio-temporal changes through the naked eye. The minute motions of interest in the hand are below the naked eye's sensitivity threshold, and thus, Eulerian Video Magnification is used to amplify these motions. This method was chosen as it has shown to produce good results in similar projects and works as detailed in Section 3.1. This process of magnification is extremely important in this pipeline as it magnifies all the micromotions in the hand which is the basis to detect and classify these micro-motions.This magnification method uses the Eulerian idea of fluid flow, which analyzes the changes of the properties of the fluid over time as opposed to the Lagrangian point of view, which analyzes the position and motion of individual particles, which is highly cumbersome.Eulerian Video Magnification follows the pipeline of spatial processing by building a Laplacian pyramid using a Gaussian pyramid, and subsequently applying a band-passing filter to extract the frequency band of interest and magnification. The band-passing takes in all frequencies and passes those which are within a user -specified range while rejecting the frequencies outside the range, which is how the frequency band of interest is extracted.1) Spatial Processing: Spatial processing [9] is accomplished by using a Laplacian pyramid in order to extract minute movements between successive frames. The Laplacian pyramid is created by first building a Gaussian Pyramid and then using its levels to build the Laplacian pyramid eventually. The pyramids help in the extraction of tiny motions since they minimize and maximize the images to different scales. The large-scale images help detect smaller motions and features while the small-scale images detect larger motions and features. This is depicted in Figs 2, 3. a) Gaussian Pyramid: Consider an image represented by array I 0 . I 0 is the bottom level of the Gaussian Pyramid to be built. It undergoes low pass filtering and results in the obtainment of I 1 , which is smaller and lower in resolution than I 0 . A low-pass filter is a filter which passes frequencies lower than the given cut-off frequency and ignores signals whose frequencies are above the cutoff frequency.This new image, which I 1 represents, constitutes the first level of the Gaussian Pyramid. I 1 is created by performing a convolution-like operation wherein the values of pixels in I 0 are subjected to a weighted average by a selected window (say a 5 x 5 window), i.e. Gaussian Blurring. Subsequently, image I 2 is created by performing the same steps on I 1 , I 3 is created from I 2 , and up to the n th level.The function performed above is the REDUCE function, wherein:which means, for levels 0 < l < N and nodes i, j, 0 < i < C l , 0 < j < R l :where C represents the number of columns and R represents the number of rows of I 0 , and w represents the pattern of weights used to apply the Gaussian blur (see also Fig 4) . Thus, a Gaussian Pyramid is created by applying a Gaussian blur (averaging of pixels using kernels) to an image, followed by reduction of the image size to half of its original dimensions (see Fig 5) .b) Laplacian Pyramid: The Laplacian Pyramid is created from the Gaussian Pyramid using the EXPAND function as:where Ll stores the difference between the larger and smaller images, i.e, whatever has been blurred by the REDU CE function (Eqs 1, 2) where Thus, the function enlarges the image from, the image is doubled (see Fig 6) . The construction of this Laplacian pyramid leads to the down-sampling and the decomposition of the video into spatial frequency bands. These spatial frequency bands are subjected to temporal processing to magnify the motions of our interest. The time series corresponding to a pixel's value in a given spatial frequency band is considered. An appropriate bandpass filter (a filter which takes in all frequencies and passes the frequencies within a specified range and rejects those outside this given range) is used to extract the frequencies of interest. For example, if we consider the frequency of human respiration which is approximately 0.2 Hz, we can specify a range of 0 -0.5 Hz to the bandpass filter to extract this frequency.The next subsection details the temporal processing to magnify the motions of interest.2) Temporal Processing: The temporal processing uses the extracted frequencies from the spatial frequency band in section 4.1.1 to look for oscillations of brightness at a given pixel across the frames of the video and magnify them. Since the detailed temporal processing for a complex data is extremely complicated, the temporal processing for a single sinusoidal curve is given below.Let I(x, t) denote image intensity at time t and position x. Due to the translational motion of the image, the expression for intensity with respect to displacement function δ(t) is modified as:Next, we use first-order Taylor Series expansion to approximate about x as:Consider B(x, t), obtained by applying a bandpass filter over I(x, t). This filter picks up on everything except for f (x). It is assumed that δ(t) is also within the allowable band of the filter. We see that:Finally, magnification factor α is applied to B(x, t) and added back to I(x, t), which results inBy combining Equations 5, 6 and 8 we arrive at:This final perturbation is subjected to first-order Taylor Series expansion to obtain the final processed signal as:This final result represents the spatial displacement δ(t) of image f (x) at time t which is magnified by order of (α + 1), showing that this processing results in magnified motions. The entire Eulerian Video Magnification method is summarized in Fig 7 below.   Fig. 7 : Pictorial Representation of Eulerian Video Magnification pipeline where the input video is first decomposed to the input video into spatial frequency bands using a temporal filter. The decomposed bands are then amplified by magnification factor α and added back to the original signal, thus magnifying motions of interest. These are finally collapsed to generate the output video [2] .

B. Skeletonization

The Skeletonization algorithm by Vikas Gupta [10] has been used to detect key points in the hand to help locate micromotions in the hand. This algorithm proposed by Gupta is based on the Hand Key-point Detection in Single Images using Multiview Bootstrapping by Simon et al. [11] and Convolutional Pose Machines by Wei et al [12] . This section details the method described in these papers and the particulars of Gupta's method. Simon et al. [11] detail a method to use small datasets which are annotated to detect key points in the "best views" and filter out wrong detections using 3D triangulation. This method aims to better key point detection of the hand and minimize incorrect detection due to minor or significant occlusions by creating a multi-camera view system and training the detector on these multiple views. This method is powerful as it helps label key points in the hand that are almost impossible to label due to occlusion. This technique in the multi-camera setup allows for reconstructions in scenarios such as orchestras or theatre. This multi-view bootstrapping training of data is started off by using a detector d() which maps an image patch l R w×h×3 to P key points, each with detection confidence of c p :Each of these points p corresponds to a different feature of the hand. The assumption made is that there is only a single view of each p in selected image patch I. Detector d 0 is trained on images I f , which have a set of labeled key points {y f } This training set which is obtained initially is denoted by T 0 ,which has N 0 elements (see Fig 8 for an illustration of this method). Thus,Given an initial detector d 0 , and an unlabeled dataset of multiview images, the detector must generate a set of labeled images depicted by T 1 . T 1 is then used to improve the detector using data from T 0 and T 1 . This performance enhancement of detector T 0 is done using a process known as 3D triangulation.The main aim of 3D triangulation is to correct the faulty detections on the first trial of a given view by using detections from other unlabeled training data and creating a correct 2D projection of the key-point without occlusion.Let us consider a frame of a video that has V views. The detector d i is trained on every image I f v , which results in a set of 2D key points detected denoted by DAs seen previously, for p detected keypoints in each of these frames, there exists a set {x f v , c f v } where x denotes the location of the detected key point and c denotes the confidence measure. For robust 3D triangulation, Random Sample Consensus (RANSAC) is used. RANSAC is a method of estimation used on some data with outliers where the outliers do not affect the estimation and prediction of the mathematical model. RANSAC is used on D (Eq 14). Additionally, a confidence threshold of λ is applied. Thus, we obtain the final triangulated points as:where X f p ∈ R 3 is the 3D triangulated keypoint p in frame f , and P v (X) ∈ R 2 denotes the projection of 3D point X into view v.This method of 3D triangulation is robust. Even though it constructs a lower number of triangulated key points, it makes sure that the entire hand's detections are accurate to prevent incorrect data for training the subsequent detectors.These detected triangulated keypoints are now scored to detect the best key points. This is to avoid erroneous data in subsequent training sets. This scoring of the frame is done by summating the detection confidences produced. The "best" frame is picked by observing which frame has the highest confidence summation (see Fig 9) . Fig. 9 : Confidence maps produced in the Multiview Bootstrapping [11] .Finally, the next detector, i.e., the d i+1 is constructed using the N best projections. The N best projections training set is determined as:where P v (V sn v ) depicts the projection of point p for frame index S n into a view v.The detectors d i used in this method are Convolutional Pose Machine (CPM) detectors. Convolutional Pose Machines (CPMs) [12] implement a method that is used to estimate human poses. CPMs consist of multiple convolutional neural networks which produce belief maps. The previous layer's belief map and image features are fed in as input to the subsequent layer for each layer in the CPM as depicted in In the method developed by Simon et al. [11] , the convolutional stages of the predefined VGG-19 network are used. Vikas Gupta uses the above method in [10] to help detect 22 3D keypoints of the hand, representing the background and the other 21 representing the hand. The frame is first converted to a blob and creates probability maps as matrices to estimate the locations of the key points. Based on a threshold of confidence (such as λ as mentioned above), the point is either selected or rejected. After selecting the appropriate key points, the algorithm draws circles to show the key points on the frame. The algorithm also draws lines to connect the key points.This approach was used through a package from Gupta's method for this paper. The CPM and the skeletonization algorithms were pre-trained into a model by Gupta and made available [10] . They were not trained on the raw data acquired for this paper.

C. K Nearest Neighbor (kNN) Classifier

The kNN classifier is a non -parametric machine learning algorithm. As a non-parametric algorithm, it does not make strong assumptions about the form of the mapping function. Due to this functionality, it can learn any functional form from the data provided to it. The kNN algorithm works by correlating a data point with its k nearest similar neighbors and classifying it. During the classification of a data point, the Euclidean distances between it and neighboring points are calculated.The Euclidean distance is calculated by:Based on the values of k and the minimum Euclidean distances calculated, the point is classified as depicted in the Fig 11. 

IV. METHOD

This work proposes a method to detect and classify micromotions in the hand using Waveform Analysis present in the hand using Eulerian Video Magnification, Skeletonization, Heat -Mapping, and the kNN machine learning algorithm. The videos are first pre-processed to gain relevant information about the micro movements in the hand. This pre-processing to obtain the final waveform is shown above in Fig 12.  Fig. 11 : Depiction of the working of kNN algorithm. Fig. 12 : Image representing the pre -processing pipeline of the proposed method. The pink boxes depict computerized components of pre-processing and the blue boxes depict the manual components.

A. Data Acquisition

Smartphone videos of both hands of 45 subjects, i.e. 90 datasets, were collected. Due to COVID -19 restrictions, subjects were asked to self -record videos from their homes. The gender ratio of subjects taken for this test is 1:1. All subjects considered in this experiment are Indian. The mean age of all subjects is 51 years, with the youngest being 13 and the oldest being 90 years old.Data were acquired by asking subjects to record videos on smartphones in lit conditions. The videos were taken by keeping the hand steadily on the arm of a chair, facing down, and keeping the camera on a stand at one meter from the subject as depicted in Figs 13 and 14 below.In specific videos, the original videos were not of the appropriate size for creating the three levels of the Laplacian Pyramid, which is built during the Eulerian Video Magnification algorithm. Due to this, 1, 2, or 3 rows or columns of zeros are added to the image (images are padded), thus changing the size. Therefore, during the process of heat-mapping, due to the usage of both the original and magnified video, the original image is resized to the same size as the magnified result.

B. Pre-processing steps for Classification

The videos acquired directly from subjects were first subjected to skeletonization which resulted in the detection of 22 key points in the hand. The key points are essential to mark the location of the micro-motions. Additionally, the skeletonization algorithm also joins these key points to form a skeleton-like structure on the hand, as seen in Fig 15. These lines are not essential to the method discussed here; however, they serve as additional landmarks to help locate the motions of interest.The original data is also subjected to Eulerian Video Magnification in parallel. This results in the magnified video, where various micro-motions in the hand such as the pulse, tremor components, random movements in the hand, etc., become visible to the human eye.This magnified result is then heat-mapped as seen in Fig.  15(b) . Since available heat-mapping algorithms are used to magnify larger motions, they do not perform effectively for this use case. Thus, here a bit-wise OR operator was used between the original video and the magnified video which yields a suitable heatmap that can pick up on the subtle changes in position, i.e., the small motions of the various parts of the hand.Finally, the results from the heat-mapped and skeletonized results are averaged to overlap the skeletonization and heatmapped results (see Fig 16) . This overlapped video is used to label motion. The intensity of color and key points detected in the hand are essential features for classifying the motions in different parts of the hand.

C. Labelling Data

Two stages of data labelling were followed for the Machine Learning Classification task.1) Stage 1 -Labelling motions occurring in original video submitted by the subject: In this first stage, only the original video was considered. Extra background motions such as the movement of people walking in the background, the movement of a swing, etc., and the movement of the entire frame was labeled as background motion.2) Stage 2 -Labelling motion from Motion-magnified result: In this stage, the magnified result is used to label certain other motions. These are finger, hand movements or tremors and throbbing of blood vessels in hand. In specific videos where subjects recorded their entire middle bodies and hands, movement of the stomach during breathing was also labeled. These labels are detailed in the Fig. 17 .The waveforms above (see Fig 17) are created using the RGB values of select pixels in the right stomach of subject 001. These pixels are selected using the pre-processing steps detailed in the previous subsection IV-B. Within the hand, pixels are picked using the results of the heatmap and skeletonization. Pixels where all pre-processing steps match are selected.

D. Waveform Creation

For selection of pixels outside the hand, only heatmap and manual markings are used. This is how the points for background motion and stomach motion are found. Initially, all three-color channels' waveforms were plotted (Fig 18 (ac) ). However, it was observed that since color magnification did not take place across time, the average of the three channel waveforms could be taken as the final waveform for the point (Fig 18(d) ). Using this method, waveforms are synthesized for every selected pixel from every video (refer to Fig. 19 below which depicts the waveforms of all pixels of a particular video). 

E. Classification

The labelled waveforms obtained were finally passed into a kNN model for classification. The waveforms were limited to the central 10 seconds of data from each subject for inputting into the kNN. These waveform inputs into the kNN were vectors of the averaged RGB values of the pixels in each region of each frame, i.e. pixels of each subject under a particular label.For classification, the kNN model was used. Multiple past works and papers have assessed the usefulness of different machine learning (Bagged Trees, Decision Trees, Weighted and Unweighted kNNs, etc.) and deep learning models (Deep Belief Network, Deep Neural Network and Long-Short Term Memory, and Recurrent Neural Networks, etc.) for the classification of waveforms. Alghamdi et al. [5] detail the use of kNNs for waveform classification and show promising results. Additionally, for this project, the data collected is highly overrepresented by the 'hand motion'. There is almost 3 times the amount of data for the 'hand motion' as there is for 'background' or 'vein motion'. Due to this bias in data, kNNs were preferred over Deep Learning methods.For this project, Google Colab was used to train and test the kNN. The data was split into three random mini -cohorts for training. The cohorts were each trained on a different model. The outputs of the three models were plotted into confusion matrices to assess the performance of the model. Additionally, the accuracy of the models with respect to the value of 'k' nearest neighbors was assessed by plotting graphs of the accuracy versus the value of 'k'. This analysis revealed that the highest accuracy was when k = 3. Two implementations of the Eulerian Video Magnification code were used in this experiment -Python and Matlab. The Python implementation was found on Github [14] and was written by Flyingzhao. This implementation clarified the code as it was simplified. It magnified the motions properly in all 45 datasets. However, there was an un-explainable "software" noise seen in the videos produced by this method, as seen in Fig. 20(b) . This noise may be due to an overflow of colors in the pixels. The Matlab code provided by Wu et al. [2] gave expected results as detailed in the original paper "Eulerian video magnification for revealing subtle changes in the world." This paper provided noiseless video and enabled the visibility of the micro motions in the hand as seen in Fig. 20(a) . The Eulerian Video Magnification algorithm performed satisfactorily without any visible artifacts or noise in the videos of all different subjects. Subjects had different recording environments such as different lighting settings, different frame sizes, and different cameras and camera angles.

B. Heat-mapping

Heat-mapping was done by performing the Bit-wise OR operation on the original video and the magnified video. This heat mapping highlighted the regions in the hand which had suffered motion after motion magnification. The analysis of results was done using various parameters. One was the closeness of the camera to the hand. It was observed that none of the videos which were far away from the camera yielded useful results, and thus, a correlation can be set up between the distance of the hand from the camera and the quality of the heat-map produced. This is highlighted in Figs 21(a) and (b). Another parameter used was the difference in the lighting conditions. Specific videos were taken in natural light or welllit circumstances Fig 22(a) , while certain videos were taken in low-light or yellow-light conditions Fig 22(b) . It was observed that the lighting conditions did not affect the quality of the heatmap. It can therefore be concluded that there is no strong correlation between lighting conditions and heat map quality. The quality of the heat map is determined by the ability of the bit-wise OR operator to detect and highlight the motions produced after magnification. This quality was determined manually. In this method, the skeletonization algorithm was modified to detect key points and draw circles but not draw the lines joining the key points to form the skeleton. The algorithm doesn't show consistency in its performance. This can be attributed to the fact that the algorithm has been trained for hand pose estimation and not a still, downward-facing hand. Additionally, most hand detection and skeletonization algorithms are trained on images of the palm and the hand facing upwards rather than the downward back of the hand used in this experiment.

C. Skeletonization

This algorithm has correctly detected all key points in certain cases such as Fig 23(a) and has also detected every key point incorrectly as in Fig 23(b) .It has been observed that the algorithm detects the hands' keypoints accurately when the hand is placed flat on a surface and fully visible rather than resting on the arm of a chair as seen in Fig 23(c) where the subject's resting hand is not detected but the key points of the hand on the chair are detected.

D. Overall Results: Classification of Motions after Pre-Processing

The three models gained accuracies of 90.33%, 93.37% and 89%. These high accuracies can be attributed to the:• large amount of data used for training, • the correct selection of pixels which were artifact-free, • appropriate pre-processing of raw data, and • use of the best value of k (k = 3) However, it was also noted that the bias towards the 'hand motion' due to larger amounts of data, the machine tended to confuse all other categories with this motion as seen in Overall, these results show the potential of this work to be used as a pre-processing technique after removing data biases for training. Additionally, it is observed that k value = 3 is most ideal for this use-case as it yields best accuracy (see Fig 25) .

VI. FUTURE WORK

The work proposed in this paper discusses a method to classify the motions in the hand. Although this method is helpful to atlas the human hand's micro-motions, there is some more useful information that can be accessed from this. For example, the tremors in the hands can be further analyzed. They can be used to aid in the remote detection of neuro-degenerative diseases and motor control diseases such as Parkinson's Disease, Essential Tremor disease, etc. Additionally, the labeling of the stomach's movements was done to explore the extraction of a person's breathing rate.Moreover, a serious challenge faced during the development of this method is the lack of data. To develop a higher level of accuracy using Deep Learning for the proposed method, a greater amount of data would help the machine learn many features. Thus, the accuracy of classification would improve. To acquire a greater amount of data, data augmentation techniques can be used in the future.An additional observation made during this study is that many hand detection algorithms [13] and skeletonization algorithms are trained on common hand poses and thus are not very accurate in detecting or skeletonizing the pose of the hand in the proposed method. Therefore, for future improvements, skeletonization and hand detection algorithms can be retrained on the pose used for this paper for more accurate results.

VII. CONCLUSION

The computerized classification of micro-motions in the hand using waveforms from mobile phone videos applied Eulerian Video Magnification, Skeletonization, Manual Labeling and Classification using kNN to classify micro-motions from videos. Raw data were collected and collated due to lack of readily available datasets, for this project. This helped the classifier train on raw real-world data. This project has shown the capability to be used as an advantageous pre-processing tool for micro -motion detection in the hand. However, for this, the biases in data that existed must be eliminated. Furthermore, after removal of bias and collection of sufficient data, deep learning models can also be tested for this use-case. Ultimately, this method was able to reach an accuracy of 92.48% on 45 videos of the hand. It is hoped this work can be improved upon to make it useful for the remote detection of motor control diseases.

ACKNOWLEDGMENT

The author would like to acknowledge that this research work was conducted as part of the Pioneer Research program and thank Prof Susan E Fox, Professor and Chair of Dept of Mathematics, Statistics and Computer Science at Macalaster College for her guidance.

